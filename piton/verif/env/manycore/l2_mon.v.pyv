// Copyright (c) 2015 Princeton University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Princeton University nor the
//       names of its contributors may be used to endorse or promote products
//       derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//==================================================================================================
//  Filename      : l2_mon.v
//  Created On    : 2014-05-08
//  Last Modified : 2018-11-16 17:18:12
//  Revision      :
//  Author        : Yaosheng Fu
//  Company       : Princeton University
//  Email         : yfu@princeton.edu
//
//  Description   : Monitors for the L2 cache
//
//
//====================================================================================================


<%
    import os
    import sys
    sys.path.insert(0, os.path.join(os.environ["DV_ROOT"], 'tools/bin/'));
    from pyhplib import *
%>

`include "define.tmp.h"
`include "l2.tmp.h"
`include "sys.h"
`include "iop.h"
`include "cross_module.tmp.h"
import ariane_pkg::*;

module l2_mon (
    input wire clk
);



always @ (posedge clk)
begin

<%
    t = r'''

    if(!$test$plusargs("disable_l2_mon"))
    begin

    if (`L2_TOP0.pipe1.ctrl.valid_S1 && ~`L2_TOP0.pipe1.ctrl.stall_S1)
    begin

        $display("MISS_COUNTER: %d", `L2_TOP0.config_regs.l2_miss_counter_reg_f);
        $display("MISS_COUNTER L1: %d", `CORE_REF0.ariane.i_perf_counters.perf_dl1);
        //$display("TILE0-------------------------------------");
        //$display($time);
        $write($time, " P1S1 msg type: ");
        print_msg_type(`L2_TOP0.pipe1.ctrl.msg_type_trans_S1);
        $display("addr: 0x%h, Data_size: %b, cache_type: %b", `L2_TOP0.pipe1.dpath.addr_S1, `L2_TOP0.pipe1.ctrl.data_size_S1, `L2_TOP0.pipe1.ctrl.cache_type_S1);
        //$display("P1S1 valid: stall: %b, stall_pre: %b, stall_hazard: %b, stall_mshr: %b, stall_msg: %b, stall_global: %b",
        //          `L2_TOP0.pipe1.ctrl.stall_S1, `L2_TOP0.pipe1.ctrl.stall_pre_S1,
        //          `L2_TOP0.pipe1.ctrl.stall_hazard_S1, `L2_TOP0.pipe1.ctrl.stall_mshr_S1,
        //          `L2_TOP0.pipe1.ctrl.stall_msg_S1, `L2_TOP0.pipe1.ctrl.global_stall_S1);
        //$display("Control signals: %b", `L2_TOP0.pipe1.ctrl.cs_S1);
        //`ifndef NO_RTL_CSM
        //$display("CSM enable: %b", `L2_TOP0.pipe1.ctrl.csm_en);
        //`endif
        //$display("Special addr type: %b", `L2_TOP0.pipe1.ctrl.special_addr_type_S1);
        //$display("Msg from mshr: %b", `L2_TOP0.pipe1.ctrl.msg_from_mshr_S1);
        //$display("P1S1 addr: 0x%h", `L2_TOP0.pipe1.dpath.addr_S1);
        //$display("Mshr_addr: 0x%h", `L2_TOP0.pipe1.dpath.mshr_addr_in_S1);
        //$display("Tag_addr: 0x%h", `L2_TOP0.pipe1.dpath.tag_addr_S1);
        //$display("Tag data in: 0x%h", `L2_TOP0.pipe1.dpath.tag_data_in_S1);
        //$display("Tag data mask in: 0x%h", `L2_TOP0.pipe1.dpath.tag_data_mask_in_S1);
        //$display("State_rd_addr: 0x%h",`L2_TOP0.pipe1.dpath.state_rd_addr_S1);
        //$display("Msg data: 0x%h", `L2_TOP0.pipe1.dpath.msg_data_S1);
        //$display("Msg length: %b", `L2_TOP0.pipe1.msg_length);
        //$display("src x: %b, src y: %b", `L2_TOP0.pipe1.dpath.src_x_S1, `L2_TOP0.pipe1.dpath.src_y_S1);
        //$display("sdid: %d, lsid: %d", `L2_TOP0.pipe1.dpath.sdid_S1, `L2_TOP0.pipe1.dpath.lsid_S1);

    end

    //////////////////////////////////////
    // Monitors
    //////////////////////////////////////


    //the lru bit should be invalid if the line itself is invalid
    if (`L2_TOP0.pipe1.ctrl.valid_S2 && ~`L2_TOP0.pipe1.ctrl.stall_S2)
    begin
            if((!`L2_TOP0.pipe1.dpath.state_way_S2[0][`L2_STATE_VD]) && `L2_TOP0.pipe1.dpath.l2_lru_bits_S2[0])
            begin
                $display("%d : Simulation -> FAIL(TILE0 L2 pipe1 lru bit 0 is valid but the line itself is invalid.)", $time);
                `ifndef VERILATOR
                repeat(5)@(posedge clk);
                `endif
                `MONITOR_PATH.fail("l2_mon: TILE0 L2 pipe1 lru bit 0 is valid but the line itself is invalid ");
            end
            if((!`L2_TOP0.pipe1.dpath.state_way_S2[1][`L2_STATE_VD]) && `L2_TOP0.pipe1.dpath.l2_lru_bits_S2[1])
            begin
                $display("%d : Simulation -> FAIL(TILE0 L2 pipe1 lru bit 1 is valid but the line itself is invalid.)", $time);
                `ifndef VERILATOR
                repeat(5)@(posedge clk);
                `endif
                `MONITOR_PATH.fail("l2_mon: TILE0 L2 pipe1 lru bit 1 is valid but the line itself is invalid ");
            end
            if((!`L2_TOP0.pipe1.dpath.state_way_S2[2][`L2_STATE_VD]) && `L2_TOP0.pipe1.dpath.l2_lru_bits_S2[2])
            begin
                $display("%d : Simulation -> FAIL(TILE0 L2 pipe1 lru bit 2 is valid but the line itself is invalid.)", $time);
                `ifndef VERILATOR
                repeat(5)@(posedge clk);
                `endif
                `MONITOR_PATH.fail("l2_mon: TILE0 L2 pipe1 lru bit 2 is valid but the line itself is invalid ");
            end
            if((!`L2_TOP0.pipe1.dpath.state_way_S2[3][`L2_STATE_VD]) && `L2_TOP0.pipe1.dpath.l2_lru_bits_S2[3])
            begin
                $display("%d : Simulation -> FAIL(TILE0 L2 pipe1 lru bit 3 is valid but the line itself is invalid.)", $time);
                `ifndef VERILATOR
                repeat(5)@(posedge clk);
                `endif
                `MONITOR_PATH.fail("l2_mon: TILE0 L2 pipe1 lru bit 3 is valid but the line itself is invalid ");
            end

    end

    //do not evict a non-empty entry if there are empty entries left
    if (`L2_TOP0.pipe1.ctrl.valid_S2 && ~`L2_TOP0.pipe1.ctrl.stall_S2)
    begin
        if (`L2_TOP0.pipe1.dpath.l2_evict_S2)
        begin
            if(!(`L2_TOP0.pipe1.dpath.state_way_S2[0][`L2_STATE_VD] && `L2_TOP0.pipe1.dpath.state_way_S2[1][`L2_STATE_VD]
            && `L2_TOP0.pipe1.dpath.state_way_S2[2][`L2_STATE_VD] && `L2_TOP0.pipe1.dpath.state_way_S2[3][`L2_STATE_VD])
            && `L2_TOP0.pipe1.dpath.state_way_S2[`L2_TOP0.pipe1.dpath.l2_evict_way_sel_S2][`L2_STATE_VD])
            begin
                $display("%d : Simulation -> FAIL(TILE0 L2 pipe1 evicts a non-empty line %d with other empty line left.)", $time,  `L2_TOP0.pipe1.dpath.l2_evict_way_sel_S2);
                `ifndef VERILATOR
                repeat(5)@(posedge clk);
                `endif
                `MONITOR_PATH.fail("l2_mon: TILE0 L2 pipe1 evicts a wrong line ");
            end
        end
    end

    // Tri: print out raw messages
    if (`L2_TOP0.pipe2.buf_in.valid_in && `L2_TOP0.pipe2.buf_in.ready_in)
    begin
        $display($time);
        $display("TILE0 noc3 flit raw: 0x%x", `L2_TOP0.pipe2.buf_in.data_in);
        if ( ^`L2_TOP0.pipe2.buf_in.data_in === 1'bx)
        begin
            $display("%d : Simulation -> FAIL(TILE0 noc3 receives X data 0x%x)", $time,  `L2_TOP0.pipe2.buf_in.data_in);
            `ifndef VERILATOR
            repeat(5)@(posedge clk);
            `endif
            `MONITOR_PATH.fail("l2_mon: TILE0 noc3 receives X data");
        end
    end

    //check x signals
    if (`L2_TOP0.pipe2.ctrl.valid_S2 && !`L2_TOP0.pipe2.ctrl.stall_S2)
    begin
        if (`L2_TOP0.pipe2.ctrl.msg_type_S2_f == `MSG_TYPE_WB_REQ ||
            `L2_TOP0.pipe2.ctrl.msg_type_S2_f == `MSG_TYPE_LOAD_FWDACK ||
            `L2_TOP0.pipe2.ctrl.msg_type_S2_f == `MSG_TYPE_STORE_FWDACK ||
            `L2_TOP0.pipe2.ctrl.msg_type_S2_f == `MSG_TYPE_INV_FWDACK ||
            `L2_TOP0.pipe2.ctrl.msg_type_S2_f == `MSG_TYPE_LOAD_MEM_ACK)
        begin
            if(`L2_TOP0.pipe2.dpath.l2_way_sel_S2 === 2'bxx)
            begin
                $display("%d : Simulation -> FAIL(%0s)", $time, "Cannot find the pre-allocated entry in L2");
                `ifndef VERILATOR
                repeat(5)@(posedge clk);
                `endif
                `MONITOR_PATH.fail("l2_mon: Cannot find the pre-allocated entry in L2");
            end
        end
    end

    //inv_fwdack monitor
    if (`L2_TOP0.pipe2.ctrl.valid_S1 && !`L2_TOP0.pipe2.ctrl.stall_S1)
    begin
        if ((`L2_TOP0.pipe2.ctrl.msg_type_S1 == `MSG_TYPE_INV_FWDACK)
        && (`L2_TOP0.pipe2.ctrl.msg_length_S1))
        begin
            $display("%d : Simulation -> FAIL(%0s)", $time, "inv_fwdack contain data flits");
            `ifndef VERILATOR
            repeat(5)@(posedge clk);
            `endif
            `MONITOR_PATH.fail("l2_mon: inv_fwdack contain data flits");

        end
    end


    //SMC refill invalid data
    `ifndef NO_RTL_CSM
    if (`L2_TOP0.pipe2.ctrl.valid_S2 && !`L2_TOP0.pipe2.ctrl.stall_S2)
    begin
        if (`L2_TOP0.pipe2.ctrl.smc_wr_en_S2
        && (~(`L2_TOP0.pipe2.dpath.smc_data_in_S2[127] | `L2_TOP0.pipe2.dpath.smc_data_in_S2[95]
             |`L2_TOP0.pipe2.dpath.smc_data_in_S2[63]  | `L2_TOP0.pipe2.dpath.smc_data_in_S2[31])))
        begin
            $display("%d : Simulation -> FAIL(%0s)", $time, "l2_mon: SMC refills invalid data");
            `ifndef VERILATOR
            repeat(5)@(posedge clk);
            `endif
            `MONITOR_PATH.fail("l2_mon: SMC refills invalid data");
        end
    end
    `endif
    end     //disable_l2_mon

    '''
    tt = ReplicatePattern(t, ["RTL_SPARC0", "L2_TOP0", "TILE0"]);
    print tt;
%>


end






task print_msg_type;
input [`MSG_TYPE_WIDTH-1:0] msg_type;
begin
    case (msg_type)
        `MSG_TYPE_LOAD_REQ              : $write("    ld_req     ");
        `MSG_TYPE_PREFETCH_REQ          : $write("   pref_req    ");
        `MSG_TYPE_STORE_REQ             : $write("    st_req     ");
        `MSG_TYPE_BLK_STORE_REQ         : $write("  blk_st_req   ");
        `MSG_TYPE_BLKINIT_STORE_REQ     : $write(" blkinit_st_req");
        `MSG_TYPE_CAS_REQ               : $write("    cas_req    ");
        `MSG_TYPE_CAS_P1_REQ            : $write("  cas_p1_req   ");
        `MSG_TYPE_CAS_P2Y_REQ           : $write("  cas_p2y_req  ");
        `MSG_TYPE_CAS_P2N_REQ           : $write("  cas_p2n_req  ");
        `MSG_TYPE_SWAP_REQ              : $write("    swap_req   ");
        `MSG_TYPE_SWAP_P1_REQ           : $write("  swap_p1_req  ");
        `MSG_TYPE_SWAP_P2_REQ           : $write("  swap_p2_req  ");
        `MSG_TYPE_WB_REQ                : $write("     wb_req    ");
        `MSG_TYPE_WBGUARD_REQ           : $write("   wbgrd_req   ");
        `MSG_TYPE_NC_LOAD_REQ           : $write("   nc_ld_req   ");
        `MSG_TYPE_NC_STORE_REQ          : $write("   nc_st_req   ");
        `MSG_TYPE_LOAD_FWD              : $write("     ld_fwd    ");
        `MSG_TYPE_STORE_FWD             : $write("     st_fwd    ");
        `MSG_TYPE_INV_FWD               : $write("    inv_fwd    ");
        `MSG_TYPE_LOAD_MEM              : $write("     ld_mem    ");
        `MSG_TYPE_STORE_MEM             : $write("     st_mem    ");
        `MSG_TYPE_LOAD_FWDACK           : $write("   ld_fwdack   ");
        `MSG_TYPE_STORE_FWDACK          : $write("   st_fwdack   ");
        `MSG_TYPE_INV_FWDACK            : $write("   inv_fwdack  ");
        `MSG_TYPE_LOAD_MEM_ACK          : $write("   ld_mem_ack  ");
        `MSG_TYPE_STORE_MEM_ACK         : $write("   st_mem_ack  ");
        `MSG_TYPE_NC_LOAD_MEM_ACK       : $write(" nc_ld_mem_ack ");
        `MSG_TYPE_NC_STORE_MEM_ACK      : $write(" nc_st_mem_ack ");
        `MSG_TYPE_NODATA_ACK            : $write("   nodata_ack  ");
        `MSG_TYPE_DATA_ACK              : $write("    data_ack   ");
        `MSG_TYPE_INTERRUPT_FWD         : $write("     int_fwd   ");
        `MSG_TYPE_INTERRUPT             : $write("       int     ");
        `MSG_TYPE_L2_LINE_FLUSH_REQ     : $write("   line_flush  ");
        `MSG_TYPE_L2_DIS_FLUSH_REQ      : $write("    dis_flush  ");
        default                         : $write("      undef    ");
    endcase
end
endtask








endmodule
